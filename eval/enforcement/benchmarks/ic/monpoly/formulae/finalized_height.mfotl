(*
  Policy: If two blocks at heights h and h + 1 are finalized by nodes in a subnet,
    then the earliest finalization of the block at height h + 1 happens at most 80s
    after the earliest finalization of the block at height h.

  Relevant events:
  - originally_in_subnet(node_addr:string, node_addr:string, subnet_id:string)
  - registry__node_added_to_subnet(node_id:string, node_addr:string, subnet_id:string)
  - registry__node_removed_from_subnet(node_id:string, node_addr:string)
  - p2p__node_added(node_id:string, subnet_id:string, added_node_id:string)
  - p2p__node_removed(node_id:string, subnet_id:string, removed_node_id:string)
  - finalized(node_id:string, subnet_id:string, height:int, hash:string, replica_version:string)

  Remarks:
  - Time-stamps are assumed to be in milliseconds.
  - The original analyzer rule ignored the node_id. This formalization ignores
    it too.
  - The "finalized" event is triggered whenever the consensus layer tries to
    deliver a batch including the block in the event to the message routing
    layer. The delivery may fail and hence there might be multiple such events
    for the same block, by the same node. This is not a problem because we
    consider the earliest delivery attempt, which is moreover a good
    approximation of the time at which the block became finalized.
*)

LET node_added_to_subnet(node_id, node_addr, subnet) =
  registry__node_added_to_subnet(node_id, node_addr, subnet)
IN
LET node_removed_from_subnet(node_id, node_addr) =
  registry__node_removed_from_subnet(node_id, node_addr)
IN
LET in_subnet(node_id, node_addr, subnet) =
  ((*
      The node was originally in this subnet, and it has not been unassigned from it.
    *)
    (ONCE originally_in_subnet(node_id, node_addr, subnet)) AND NOT (
      ONCE node_removed_from_subnet(node_id, node_addr)
    )
  )
  OR
  ((*
      The node was possibly not originally in this subnet, but it has been assigned to it.
    *)
    (
      (NOT node_removed_from_subnet(node_id, node_addr))
      SINCE node_added_to_subnet(node_id, node_addr, subnet)
    )
  )
IN
LET subnet_increasing(subnet) =
  ( EXISTS node1, node2.
    (
      in_subnet(node1, _, subnet)
      AND in_subnet(node2, _, subnet)
      AND NOT node1 = node2
      AND NOT (
        (NOT p2p__node_removed(node1, subnet, node2)) SINCE (
          (*
            In case we never observe p2p__node_added, assume that the subnet is, indeed, changing.
            Here, we conservatively assume the "worst", i.e., that the subnet may have been changing
            at the point when the log stream has started.
          *)
          p2p__node_added(node1, subnet, node2)
        )
      )
    )
  )
IN
LET subnet_decreasing(subnet) =
  ( EXISTS node1, node2.
    (
      in_subnet(node1, _, subnet)
      AND (
        ((NOT p2p__node_removed(node1, subnet, node2)) SINCE p2p__node_added(node1, subnet, node2))
        OR (
          in_subnet(node1, _, subnet)  (* Mathematically redundant; added to help Monpoly *)
          AND (
            (*
              Even though we don't whether node1 knows about node2's subnet membership, it could
              know that it had been a member of this subnet. Thus, we conservatively assume that
              the subnet is changing. Unless -- see (~) below
            *)
            in_subnet(node1, _, subnet)  (* Mathematically redundant; added to help Monpoly *)
            AND (ONCE originally_in_subnet(node2, _, subnet))
            AND NOT (ONCE p2p__node_removed(node1, subnet, node2))
            AND NOT (
              (* (~)
                If node1 thinks that node2 has been added to _some_ "subneta". Then we conclude that
                node1 does not think that node2 belongs to "subnet"; thus, node2 is not a witness of
                the fact that "subnet" is decreasing.
              *)
              ONCE p2p__node_added(node1, _, node2)
            )
          )
        )
      )
      AND NOT in_subnet(node2, _, subnet)
    )
  )
IN
LET subnet_is_changing(subnet) =
  subnet_increasing(subnet)
  OR subnet_decreasing(subnet)
IN
LET fin(node, subnet, height, hash, replica_version) =
  finalized(node, subnet, height, hash, replica_version)
  AND NOT (
    PREVIOUS ONCE EXISTS nodea. finalized(nodea, subnet, height, hash, replica_version)
  )
IN
(
  (NOT subnet_is_changing(subnet))
  SINCE[81,*]  (* 80_001 ms = 80 s + delta *)
    fin(n1, subnet, height1, hash1, replica_version)
)
AND fin(n2, subnet, height2, hash2, replica_version)
AND height2 = height1 + 1