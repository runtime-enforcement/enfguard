The formula
 LET B1(x:int)+ = B(x:int) ∧ B(add(x:int, 1)) IN LET B2(x.1:int)+ = B1(x.1:int) ∧ B1(add(x.1:int, 2)) IN LET B4(x.2:int)+ = B2(x.2:int) ∧ B2(add(x.2:int, 4)) IN LET B8(x.3:int)+ = B4(x.3:int) ∧ B4(add(x.3:int, 8)) IN □[0s,∞) (∀x.4:int. A(x.4:int) → B8(x.4:int))
is enforceable and types to
 LET B1٭(x:int)+ = ((B(x:int) : Cau) ∧:L (B(add(x:int, 1)) : Cau) : Cau) IN (LET B2٭(x.1:int)+ = ((B1٭(x.1:int) : Cau) ∧:L (B1٭(add(x.1:int, 2)) : Cau) : Cau) IN (LET B4٭(x.2:int)+ = ((B2٭(x.2:int) : Cau) ∧:L (B2٭(add(x.2:int, 4)) : Cau) : Cau) IN (LET B8٭(x.3:int)+ = ((B4٭(x.3:int) : Cau) ∧:L (B4٭(add(x.3:int, 8)) : Cau) : Cau) IN (□[0s,∞) ((∀x.4:int. (A(x.4:int) →:R (B8٭(x.4:int) : Cau) : Cau)) : Cau) : Cau) : Cau) : Cau) : Cau) : Cau
[Enforcer] @1 reactively commands:
Cause:
B(1), B(2), B(3), B(4), B(5), B(6), B(7), B(8), B(9), B(10), B(11), B(12), B(13), B(14), B(15), B(16)
OK.
[Enforcer] @1 nothing to do proactively.
[Enforcer] @2 reactively commands:
Cause:
B(3), B(4), B(5), B(6), B(7), B(8), B(9), B(10), B(11), B(12), B(13), B(14), B(15), B(16), B(17)
OK.
[Enforcer] @2 nothing to do proactively.
[Enforcer] @3 reactively commands:
Cause:
B(3), B(4), B(5), B(6), B(7), B(8), B(9), B(10), B(11), B(12), B(13), B(14), B(15), B(16), B(17), B(18)
OK.
