The formula
 LET G1(x:int) = A(x:int) IN □[0s,∞) (∀x:int. ¬G1(x:int) ∧ G1(x:int))
is not enforceable. To make it enforceable, you would need to
 either
 * at the same time
   * make A <NonObs,Cau,NonSct> (currently, it has type Obs)
   * make LET G1(x:int) = A(x:int) IN □[0s,∞) (∀x:int. G1(x:int) ∧ ¬G1(x:int)) <NonObs,Cau,ErrSct>, but this is impossible (for causability x:int must be past-guarded)
 * at the same time
   * make A <NonObs,Cau,Sct> (currently, it has type Obs)
   * make LET G1(x:int) = A(x:int) IN □[0s,∞) (∀x:int. G1(x:int) ∧ ¬G1(x:int)) <NonObs,Cau,ErrSct>, but this is impossible (for causability x:int must be past-guarded)
 * at the same time
   * make A(x:int) <Sup,Cau,NonSct>, but this is impossible (A(x:int) is never CauSup)
   * make LET G1(x:int) = A(x:int) IN □[0s,∞) (∀x:int. G1(x:int) ∧ ¬G1(x:int)) <NonObs,Cau,ErrSct>, but this is impossible (for causability x:int must be past-guarded)
 * at the same time
   * make A(x:int) <Sup,Cau,Sct>, but this is impossible (A(x:int) is never CauSup)
   * make LET G1(x:int) = A(x:int) IN □[0s,∞) (∀x:int. G1(x:int) ∧ ¬G1(x:int)) <NonObs,Cau,ErrSct>, but this is impossible (for causability x:int must be past-guarded)
 * make LET G1(x:int) = A(x:int) IN □[0s,∞) (∀x:int. G1(x:int) ∧ ¬G1(x:int)) <NonObs,Cau,ErrSct>, but this is impossible (for causability x:int must be past-guarded)
